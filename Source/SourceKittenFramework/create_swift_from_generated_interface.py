#!/usr/bin/env python

import sys
import re

f = open(sys.argv[1], "r")
contents = f.read()

# comment out import
# contents = re.compile(r'^import', re.M).sub('// import', contents)

# comment out public typealias, var
contents = re.compile('^(public\s)(typealias|var)', re.M).sub(r'//\1\2', contents)

# comment out public struct
contents = re.compile('^(public\sstruct[^}]+})', re.M).sub(r'/*\n\1\n*/', contents)

# make function and lazy var
contents = re.compile(r'^public func (sourcekitd_\w+)(\(.*)$', re.M).sub(\
r"""public func \1\2 {
    return _\1\2
}
private let _\1: @convention(c) \2 = sourcekitd.loadSymbol("\1")
""", contents)

# add missing return ()
contents = re.compile('\) =', re.M).sub(') -> () =', contents)

# remove return type on return
contents = re.compile(r'^(\s+return.*)\s->.*$', re.M).sub(r'\1', contents)

# remove type annotation on return
contents2 = re.compile(r'^(\s+return [^(]+\([^:)]+):\s+[^,)]+', re.M).sub(r'\1', contents)
while contents2 != contents:
    contents = contents2
    contents2 = re.compile(r'^(\s+return [^(]+\([^:)]+):\s+[^,)]+', re.M).sub(r'\1', contents)

# apply parameter label
contents2 = re.compile(r'^(\s+return .*)\s+_\s+(\w+)', re.M).sub(r'\1 \2: \2', contents)
while contents2 != contents:
    contents = contents2
    contents2 = re.compile(r'^(\s+return .*)\s+_\s+(\w+)', re.M).sub(r'\1 \2: \2', contents)

# apply first parameter label
contents = re.compile(r'^(\s+return [^(]+\()([^),]+)', re.M).sub(r'\1\2: \2', contents)

# remove _ on private let
contents2 = re.compile(r'^(private let .*)\s_\s', re.M).sub(r'\1 ', contents)
while contents2 != contents:
    contents = contents2
    contents2 = re.compile(r'^(private let .*)\s_\s', re.M).sub(r'\1 ', contents)


# remove return
contents = re.compile(r'(\) {\n\s+)return\s', re.M).sub(r'\1', contents)

contents = """// this file is generated by `convert_generated_interface_from_sourcekitd_h.py`
#if SWIFT_PACKAGE
import SourceKit
#endif
let sourcekitd = toolchainLoader.load("sourcekitd.framework/Versions/A/sourcekitd")
// swiftlint:disable file_length
// swiftlint:disable variable_name
// swiftlint:disable missing_docs
// swiftlint:disable valid_docs
""" + contents

sys.stdout.write(contents)
